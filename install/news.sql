DELIMITER ;;

USE cygnus_rootnode;;

DROP PROCEDURE IF EXISTS NC_NewsCreate;;
CREATE PROCEDURE NC_NewsCreate(
    p_owner INTEGER UNSIGNED,
    p_type SMALLINT UNSIGNED,
    p_showtime INTEGER UNSIGNED)
  LANGUAGE SQL
  MODIFIES SQL DATA
  SQL SECURITY INVOKER
BEGIN
  INSERT INTO NC_News VALUES(DEFAULT, p_owner, p_type, p_showtime);
  SELECT LAST_INSERT_ID() AS `Result`;
END;;

DROP PROCEDURE IF EXISTS NC_NewsSetItem;;
CREATE PROCEDURE NC_NewsSetItem(
    p_NID INTEGER UNSIGNED,
    p_ItemType SMALLINT UNSIGNED,
    p_ItemValue INTEGER)
  LANGUAGE SQL
  MODIFIES SQL DATA
  SQL SECURITY INVOKER
BEGIN
  INSERT INTO NC_NewsData VALUES(p_NID, p_ItemType, p_ItemValue)
  ON DUPLICATE KEY UPDATE ItemValue=p_ItemValue;
END;;

DROP PROCEDURE IF EXISTS NC_NewsGet;;
CREATE PROCEDURE NC_NewsGet(
    p_owner INTEGER UNSIGNED,
    p_maxtime INTEGER UNSIGNED,
    p_from INTEGER UNSIGNED,
    p_count INTEGER UNSIGNED)
  LANGUAGE SQL
  READS SQL DATA
  SQL SECURITY INVOKER
BEGIN
  SELECT N.NID, N.NewsType, N.ShowTime, I.ItemType, I.ItemValue FROM NC_News AS N
  NATURAL LEFT JOIN NC_NewsData AS I
  WHERE Owner=p_owner AND ShowTime<=p_maxtime
  ORDER BY ShowTime DESC
  LIMIT p_from, p_count;
END;;

DROP PROCEDURE IF EXISTS NC_NewsGetTimed;;
CREATE PROCEDURE NC_NewsGetTimed(
    p_owner INTEGER UNSIGNED,
    p_mintime INTEGER UNSIGNED,
    p_maxtime INTEGER UNSIGNED
    )
  LANGUAGE SQL
  READS SQL DATA
  SQL SECURITY INVOKER
BEGIN
  SELECT N.NID, N.NewsType, N.ShowTime, I.ItemType, I.ItemValue FROM NC_News AS N
  NATURAL LEFT JOIN NC_NewsData AS I
  WHERE Owner=p_owner AND ShowTime<=p_maxtime AND ShowTime>=p_mintime
  ORDER BY ShowTime DESC;
END;;

